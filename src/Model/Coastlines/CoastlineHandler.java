package Model.Coastlines;

import Enums.BoundType;
import Enums.OSMEnums.ElementType;
import OSM.OSMWay;
import org.xml.sax.Attributes;
import org.xml.sax.ContentHandler;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;

import java.awt.geom.Point2D;
import java.util.HashMap;
import java.util.Map;

/**
 * Class details:
 * A ContentHandler specialized in loading a coastline
 * file generated by CoastlineFileGenerator and store them
 * in a CoastlineFactory for later usage.
 *
 */
public class CoastlineHandler implements ContentHandler {

    /* --- INSTANCE FIELDS --- */
    private static CoastlineHandler instance;
    private static CoastlineFactory factory;

    /* --- COLLECTION FIELDS --- */
    private static Map<Long, Point2D> idToNode;
    private static Map<Long, OSMWay> idToWay;
    private static Map<Point2D, Long> coastlineIDs;
    private static Map<Point2D, OSMWay> coastlines;

    /* --- OTHER FIELDS --- */
    private OSMWay way;
    private ElementType elementType;
    private float longFactor;
    private long coastlineID;

    /**
     * Constructor that initializes values and collections
     */
    private CoastlineHandler()
    {
        factory = new CoastlineFactory();
        idToNode = new HashMap<>();
        idToWay = new HashMap<>();
        coastlines = new HashMap<>();
        coastlineIDs = new HashMap<>();
    }

    /**
     * Returns the CoastlineHandler instance
     */
    public static CoastlineHandler getInstance()
    {
        if (instance == null) {
            instance = new CoastlineHandler();
        }
        return instance;
    }

    /**
     * Resets the CoastlineHandler instance to prevent reusing old
     * fields
     */
    public static void resetInstance() { instance = null; }

    /**
     * Returns the CoastlineFactory containing all found coastlines
     */
    public CoastlineFactory getCoastlineFactory() { return factory; }

    /**
     * The beginning of an OSM element
     */
    @Override
    public void startElement(String uri, String localName, String qName,
        Attributes atts) throws SAXException
    {
        switch (qName) {
        case "bounds":
            handleBounds(atts);
            break;
        case "node":
            handleNode(atts);
            break;
        case "way":
            handleWay(atts);
            break;
        case "nd":
            handleWayNode(atts);
            break;
        case "tag":
            handleTag(atts);
            break;
        }
    }

    /**
     * Handles adding the bounds of the OSM Map segment
     */
    private void handleBounds(Attributes attributes)
    {
        float minLatitude, maxLatitude, minLongitude, maxLongitude;
        minLatitude = Float.parseFloat(attributes.getValue("minlat"));
        maxLatitude = Float.parseFloat(attributes.getValue("maxlat"));
        minLongitude = Float.parseFloat(attributes.getValue("minlon"));
        maxLongitude = Float.parseFloat(attributes.getValue("maxlon"));
        factory.addBound(BoundType.MIN_LONGITUDE, minLongitude);
        factory.addBound(BoundType.MAX_LONGITUDE, maxLongitude);
        factory.setLongitudeFactor(minLatitude, maxLatitude);
        longFactor = factory.getLongitudeFactor();
        factory.addBound(BoundType.MIN_LATITUDE, -minLatitude);
        factory.addBound(BoundType.MAX_LATITUDE, -maxLatitude);
    }

    /**
     * Handles adding an OSM Node to a storage collection
     */
    private void handleNode(Attributes attributes)
    {
        long id = Long.parseLong(attributes.getValue("id"));
        float latitude = Float.parseFloat(attributes.getValue("lat"));
        float longitude = Float.parseFloat(attributes.getValue("lon"));
        idToNode.put(id, new Point2D.Float(longitude * longFactor, -latitude));
    }

    /**
     * Handles adding an OSM Way to a storage collection
     */
    private void handleWay(Attributes attributes)
    {
        way = new OSMWay();
        long id = Long.parseLong(attributes.getValue("id"));
        elementType = ElementType.UNKNOWN;
        idToWay.put(id, way);
        coastlineID = id;
    }

    /**
     * Handles adding nodes to an OSM way
     */
    private void handleWayNode(Attributes attributes)
    {
        long ref = Long.parseLong(attributes.getValue("ref"));
        way.add(idToNode.get(ref));
        coastlineIDs.put(idToNode.get(ref), coastlineID);
    }

    /**
     * Handles specifying the type of an OSM Element
     */
    private void handleTag(Attributes attributes)
    {
        String k = attributes.getValue("k");
        String v = attributes.getValue("v");
        switch (k) {
        case "natural":
            if (v.equals(Coastline.OSM_IDENTIFIER)) {
                elementType = ElementType.COASTLINE;
            }
            break;
        }
    }

    /**
     * Handles the ending of an OSM Element
     */
    @Override
    public void endElement(String uri, String localName, String qName)
        throws SAXException
    {
        switch (qName) {
        case "way":
            switch (elementType) {
            case COASTLINE:
                coastLineFix();
                break;
            }
            break;
        case "osm":
            handleEndOfFile();
            break;
        }
    }

    /**
     * Fixes a coastline by adding segments of this way to a coastline
     * that ends and / or begins where this way begins and / or ends.
     */
    private void coastLineFix()
    {
        OSMWay before = coastlines.remove(way.getFromNode());
        OSMWay after = coastlines.remove(way.getToNode());
        OSMWay merged = new OSMWay();
        if (before != null) {
            merged.addAll(before.subList(0, before.size() - 1));
        }
        merged.addAll(way);
        if (after != null && before != after) {
            merged.addAll(after.subList(1, after.size()));
        }
        coastlines.put(merged.getFromNode(), merged);
        coastlines.put(merged.getToNode(), merged);
    }

    /**
     * Handles the end of the file and inserts the coastlines into
     * the factory
     */
    private void handleEndOfFile()
    {
        for (OSMWay way : coastlines.values()) {
            factory.insertCoastline(way);
        }
    }

    /* ---------------- IGNORE REST OF CLASS (NOT USED) ---------------- */

    @Override
    public void characters(char[] ch, int start, int length) throws SAXException
    {
    }

    @Override
    public void ignorableWhitespace(char[] ch, int start, int length)
        throws SAXException {}

    @Override
    public void processingInstruction(String target, String data)
        throws SAXException {}

    @Override
    public void skippedEntity(String name) throws SAXException {}

    @Override
    public void setDocumentLocator(Locator locator) {}

    @Override
    public void startDocument() throws SAXException {}

    @Override
    public void endDocument() throws SAXException {}

    @Override
    public void startPrefixMapping(String prefix, String uri)
        throws SAXException {}

    @Override
    public void endPrefixMapping(String prefix) throws SAXException {}
}
